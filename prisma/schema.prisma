// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("VITE_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

enum Role {
  USER
  SHOP
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String

  account Account?
  shop    ShopAccount?

  createdAt DateTime @default(now())

  role Role @default(USER)

  @@map("user")
}

model Account {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique
  hash   String?

  @@map("account")
}

model ShopAccountStatusLog {
  id       String   @id @default(cuid())
  status   String
  datetime DateTime @default(now())

  shop   ShopAccount @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String
}

model ShopAccount {
  id String @id @default(cuid())

  name String?
  slug String? @unique

  statusLogs ShopAccountStatusLog[]

  category String?
  country  String?
  city     String?

  description String?

  status String @default("new")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  products Product[]
  orders   Order[]   @relation("products_orders")

  paymentMethods         PaymentMethodType[]
  deliveryMethods        DeliveryMethod[]    @relation("delivery_methods")
  paymentMethodsMetadata Json                @default("{ \"PAYPAL\": null, \"PAGOMOVIL\": null, \"ZELLE\": null, \"CASH\": null, \"POS\": null }")

  logo   ImageAttachment? @relation(fields: [logoId], references: [id], onDelete: Cascade, name: "shop_logo")
  logoId String?          @unique

  instagram   String? @unique
  tiktok      String?
  facebook    String?
  hasWhatsapp Boolean @default(false)
  phoneNumber String?

  customers Customer[]

  @@map("shop_account")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[] @relation(references: [id], name: "category_to_product")

  createdAt DateTime @default(now())

  @@map("category")
}

model ImageAttachment {
  id String @id @default(cuid())

  original  String
  normal    String
  thumbnail String

  shop ShopAccount? @relation("shop_logo")

  product   Product? @relation(references: [id], fields: [productId], onDelete: Cascade, name: "product_image")
  productId String?

  @@map("image_attachment")
}

model Product {
  id String @id @default(cuid())

  shop   ShopAccount @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String

  images ImageAttachment[] @relation("product_image")

  name        String
  description String?
  categories  Category[] @relation("category_to_product")

  hasVariants Boolean
  visible     Boolean @default(true)
  deleted     Boolean @default(false)
  variants    Json[]

  price            Float
  promotionalPrice Float?

  stock Int
  min   Int

  priority Int @default(autoincrement())
  position Int @default(autoincrement())

  orderProducts OrderItem[]

  createdAt DateTime @default(now())

  @@map("product")
}

enum PaymentMethodType {
  PAYPAL
  PAGOMOVIL
  ZELLE
  CASH
  POS
}

enum OrderStatus {
  PROCESS
  PAYED
  CONFIRMED
  DONE
}

model Customer {
  id String @id @default(cuid())

  name        String
  lastName    String?
  instagram   String?
  phoneNumber String?
  email       String

  shop   ShopAccount @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String
  orders Order[]

  @@map("customer")
}

model DeliveryMethod {
  id                     String              @id @default(cuid())
  shop                   ShopAccount         @relation(fields: [shopId], references: [id], onDelete: Cascade, name: "delivery_methods")
  shopId                 String
  name                   String
  description            String?
  price                  Float
  active                 Boolean             @default(true)
  deleted                Boolean             @default(false)
  admitCash              Boolean             @default(false)
  requestDirection       Boolean             @default(false)
  specificPaymentMethods PaymentMethodType[]
  orders                 Order[]

  @@map("delivery_method")
}

model OrderStatusLog {
  id       String   @id @default(cuid())
  status   String
  datetime DateTime @default(now())

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
}

model Order {
  id String @id @default(cuid())

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  shop   ShopAccount @relation(fields: [shopId], references: [id], onDelete: Cascade, name: "products_orders")
  shopId String

  deliveryMethod     DeliveryMethod @relation(fields: [deliveryMethodId], references: [id])
  deliveryMethodId   String
  deliveryMethodData Json           @default("{}")

  paymentMethod PaymentMethodType
  paymentData   Json              @default("{}")

  total Float

  products OrderItem[]

  status     String           @default("process")
  statusLogs OrderStatusLog[]

  createdAt DateTime @default(now())

  @@map("order")
}

model OrderItem {
  id    String @id @default(cuid())
  price Float

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity Int

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  @@map("order_item")
}
